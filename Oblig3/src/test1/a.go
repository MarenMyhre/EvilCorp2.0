package main

import (
"net/http"
"fmt"
"log"
"io/ioutil"
"encoding/json"
)

//type JsonStruct struct {
//	Sted string
//}
type AutoGenerated struct {
	Entries []struct {
		Area              string `json:"area"`
		BoroughName       string `json:"borough_name"`
		AddressLine       string `json:"address_line"`
		PollingPlaceID    string `json:"polling_place_id"`
		BoroughID         string `json:"borough_id"`
		CountyName        string `json:"county_name"`
		PollingPlaceName  string `json:"polling_place_name"`
		GpsCoordinates    string `json:"gps_coordinates"`
		MunicipalityID    string `json:"municipality_id"`
		CountyID          string `json:"county_id"`
		MunicipalityName  string `json:"municipality_name"`
		ElectionDayVoting string `json:"election_day_voting"`
		InfoText          string `json:"info_text"`
		OpeningHours      string `json:"opening_hours"`
		PostalCode        string `json:"postal_code"`
	}
}

func main()  {
	http.HandleFunc("/2", valg)
	http.ListenAndServe(":8080", nil)
}

func valg(w http.ResponseWriter, r *http.Request){
	resp, err := http.Get ("https://hotell.difi.no/api/json/valg/valglokaler/2017")
	if err != nil{
		log.Fatal(err)

	}
	//defer resp.Body.Close()
	contents, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	//fmt.Fprint(w, "pre json parre", contents, "\n \n \n")
	data := []AutoGenerated{}
	err = json.Unmarshal(contents, data)

	if err != nil{
		log.Fatal(err)
	}
	fmt.Fprint(w, "unmarshalles json", data, "\n \n \n")
	for i, v := range data {
		fmt.Fprint(w, i, "\n \n \n \n ")
		fmt.Fprint(w, v.Entries)
	}
}
